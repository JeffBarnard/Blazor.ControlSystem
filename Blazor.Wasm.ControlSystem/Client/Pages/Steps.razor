@using Blazor.Wasm.ControlSystem.Shared

@*
    Process step view
*@

<style>
    .steplist {
        width: 250px;
        display: inline-block;
        float: left;
    }

    .steplist-item {
        height: 72px;
        margin: 0px;
    }

    .verticalline {
        width: 1px;
        background-color: darkgray;
        position: absolute;
        top: 0;
        bottom: 0;
        left: 318px;
    }

    .checklist {
        display: inline-block;
        float: left;
        padding-left: 16px;
        padding-top: 8px;
    }

    @@media (max-width: 599px) {
        .verticalline {
            visibility: hidden;
            width: 0px;
        }

        .checklist {
            padding-left: 4px;
        }
    }

    .dot {
        height: 25px;
        width: 25px;
        background-color: #bbb;
        border-radius: 50%;
        display: inline-block;
    }

    .white-dot {
        height: 25px;
        width: 25px;
        background-color: whitesmoke;
        border-radius: 50%;
        display: inline-block;
    }

    .green-dot {
        height: 25px;
        width: 25px;
        background-color: #39ba13;
        border-radius: 50%;
        display: inline-block;
    }

    .stepName {
        padding-left: 16px;
    }

    .moreIcon {
        text-align: right;
        flex-grow: 1;
        margin-right: -12px;
        color: dimgray;
    }
</style>

@if (StepController.Steps == null)
{
    <p><em> Loading...</em></p>
}
else
{
    <span class="steplist">
        <MatList @ref="@StepListComponent">
            @foreach (var step in StepController.Steps)
            {
                <MatListItem Class="steplist-item" @key="step" @onclick="@(()=>SetSelectedStep(step))">
                    <span class="@GetDotClass(step)"></span>
                    <span class="stepName">@step.Name</span>
                    @if (step.StepId == 1)
                    {
                        <span class="moreIcon">
                            <MatIconButton Class="icon-color" Icon="more_vert" OnClick="@StepMoreClick" @ref="stepMoreButton"></MatIconButton>
                        </span>
                    }
                </MatListItem>
            }
        </MatList>
    </span>
    <div class="verticalline"></div>
    <span class="checklist">
        <Checklist Operations="@SelectedStep.Operations" />
    </span>
    @*<MatCard>
        <MatCardContent>*@
            <embed src="http://www.beemer.com.br/wp-content/uploads/2014/05/S1000RR-Technical-details.pdf#page=7"
                   style="height:900px; width:900px;float:right"
                   type="application/pdf">            
        @*</MatCardContent>*@
        @*<MatCardActions>
                <MatButton>Read</MatButton>
                <MatButton>Bookmark</MatButton>
            </MatCardActions>*@
    @*</MatCard>*@
}

<MatMenu @ref="Menu">
    <MatList>
        <MatListItem>Bypass</MatListItem>
        <MatListItem>Reset</MatListItem>
    </MatList>
</MatMenu>

@code {

    [Inject]
    HttpClient Http { get; set; }

    [Inject]
    StepController StepController { get; set; }


    public MatIconButton stepMoreButton;
    public BaseMatMenu Menu;
    public MatList StepListComponent { get; set; }
    public Step SelectedStep { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (StepController != null)
            SetSelectedStep(StepController.Steps[0]);

        await StepListComponent?.SetSelectedIndex(1);
        await base.OnInitializedAsync();
    }

    public void SetSelectedStep(Step step)
    {
        SelectedStep = step;
        SelectedStep.ValueChanged = () => this.StateHasChanged();
    }

    public void StepMoreClick(MouseEventArgs e)
    {
        this.Menu.OpenAsync(stepMoreButton.Ref);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="step"></param>
    /// <returns>css class name</returns>
    public string GetDotClass(Step step)
    {
        if (step.State == StepState.NotSet)
            return "dot";
        else if (step.State == StepState.Started)
            return "white-dot";
        else if (step.State == StepState.Completed)
            return "green-dot";
        else
            return string.Empty;
    }

}
