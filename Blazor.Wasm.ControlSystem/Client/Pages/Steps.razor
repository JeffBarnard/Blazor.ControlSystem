@using Blazor.Wasm.ControlSystem.Shared

@*
    Process step view
*@

<style>
    .steplist {
        width: 280px;
        display: inline-block;
        float: left;
    }

    .steplist-item {
        height: 72px;
        margin: 0px;
    }

    .verticalline {
        width: 1px;
        background-color: darkgray;
        position: absolute;
        top: 0;
        bottom: 0;
        left: 348px;
    }

    .checklist {
        display: inline-block;
        float: left;
        padding-left: 16px;
        padding-top: 8px;
    }

    /*small screen size*/
    @@media (max-width: 599px) {
        .verticalline {
            visibility: hidden;
            width: 0px;
        }

        .checklist {
            padding-left: 4px;
        }
    }

    .dot {
        height: 25px;
        width: 25px;
        background-color: #607d8bb3;
        border-radius: 50%;
        display: inline-block;
    }

    .white-dot {
        height: 25px;
        width: 25px;
        background-color: #bbbbbb91;
        border-radius: 50%;
        display: inline-block;
    }

    .stepName {
        padding-left: 16px;
    }

    .moreIcon {
        text-align: right;
        flex-grow: 1;
        margin-right: -12px;
        color: dimgray;
    }
</style>

@if (StepController.Steps == null)
{
    <p><em> Loading...</em></p>
}
else
{
    <span class="steplist">
        <MatList @ref="@StepListComponent">
            @foreach (var step in StepList)
            {
            <MatListItem Class="steplist-item" @key="step" @onclick="@(()=>SetSelectedStep(step.Step))">
                @if (step.Step.IsComplete)
                {
                    <MatIcon Icon="check_circle" Style="font-size:26px;color:#39ba13;"></MatIcon>
                }
                else
                {
                    <span class="@GetDotClass(step.Step)"></span>
                }
                <span class="stepName">@step.Step.Name</span>
                <span class="moreIcon">
                    <MatTooltip Tooltip="Options">
                        <MatIconButton RefBack="@step.buttonForwardRef" Class="icon-color" Icon="more_vert" OnClick="@(() => StepMoreClick(step))" @key="step"></MatIconButton>
                    </MatTooltip>
                </span>
                <MatMenu @ref="step.Menu" TargetForwardRef="@step.buttonForwardRef" @key="step">
                    <MatList>
                        <MatListItem @onclick="@BypassClick">Bypass</MatListItem>
                        <MatListItem @onclick="@ResetClick">Reset</MatListItem>
                    </MatList>
                </MatMenu>
            </MatListItem>
            }
        </MatList>
    </span>

    <div class="verticalline"></div>
    <span class="checklist">
        <Checklist Operations="@SelectedStep.Operations" />
    </span>

    <embed src="http://www.beemer.com.br/wp-content/uploads/2014/05/S1000RR-Technical-details.pdf#page=7"
           style="height:900px; width:900px;float:right"
           type="application/pdf">

    @*@if (StepController.AllStepsComplete)
        {
            <div style="width:100%; height:100%; background-color:whitesmoke;">
                <MatIcon Icon="check_circle" Style="font-size:26px;color:#39ba13;"></MatIcon>
            </div>
        }*@

    @*<MatCard>
        <MatCardContent>*@
    @*</MatCardContent>*@
    @*<MatCardActions>
            <MatButton>Read</MatButton>
            <MatButton>Bookmark</MatButton>
        </MatCardActions>*@
    @*</MatCard>*@
}


@code {

    [Inject]
    HttpClient Http { get; set; }

    [Inject]
    StepController StepController { get; set; }

    // each step has it's own context menu which requires it's own DOM reference
    public List<StepView> StepList { get; set; }
    public class StepView
    {
        public Step Step { get; set; }
        public ForwardRef buttonForwardRef { get; set; } = new ForwardRef();
        public BaseMatMenu Menu { get; set; }
    }


    public MatList StepListComponent { get; set; }
    public Step SelectedStep { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (StepController != null)
        {
            SetSelectedStep(StepController.Steps[0]);
            StepController.ValueChanged = this.OnStepValueChanged;

            StepList = new List<StepView>();
            foreach (var step in StepController.Steps)
                StepList.Add(new StepView() { Step = step });
        }

        await StepListComponent?.SetSelectedIndex(1);
        await base.OnInitializedAsync();
    }

    public void SetSelectedStep(Step step)
    {
        SelectedStep = step;

        // set initial state
        if (SelectedStep.State == StepState.NotSet)
            SelectedStep.State = StepState.Started;
    }

    public void OnStepValueChanged()
    {
        // progress form
        if (SelectedStep.State == StepState.Completed)
            SetSelectedStep(StepController.GetNextStep(SelectedStep));

        this.StateHasChanged();
    }

    public void StepMoreClick(StepView step)
    {
        step.Menu.OpenAsync(step.buttonForwardRef.Current);
    }

    public string GetDotClass(Step step)
    {
        if (step.State == StepState.NotSet)
            return "dot";
        else if (step.State == StepState.Started)
            return "white-dot";
        else if (step.State == StepState.Completed)
            return "green-dot";
        else
            return string.Empty;
    }

    public void BypassClick(MouseEventArgs e)
    {
        SelectedStep.State = StepState.Completed;
    }

    public void ResetClick(MouseEventArgs e)
    {
        SelectedStep.ResetOperations();
    }

}
